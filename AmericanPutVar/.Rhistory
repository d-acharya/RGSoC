library(Rcmdr)
fix(GLM.1)
View(Forbes2000)
View(Forbes2000pp)
View(deathpen)
View(Forbes2000pp)
library(Rcmdr)
library(Rcmdr)
library(Rcmdr)
attach(Vocab)
lm(education~sex)
commander
command
der
Rcmdr
rcmdr
library(Rcmdr)
1:5
a<-1:5
a<-1:5
a
length(a)
length(t(a))
a=rep(1,5)
a
a<-rep(rep(1,5),5)
a
a<-rep(t(rep(1,5)),5)
a
a<-rep(t(rep(1,5)),5)
a
a<-1:6*6
m<-matrix(a,6)
m
a<-1:(6*6)
m<-matrix(a,6)
m
a<-rep(t(rep(1,5),5)
a
matrix(1,nrow=3,ncol=5)
matrix(0,nrow=3,ncol=5)
matrix(1,5)
matrix(1,5,5)
jex=j(:,matrix(1,5,5))
j=1:5
jex=j[:,matrix(1,5,5)]
j=1:5
jex=j[,matrix(1,5,5)]
matrix(rep(1:5,each=5),ncol=5,byrow=true)
matrix(rep(1:5,each=5),ncol=5,byrow=TRUE)
matrix(rep(1:5,each=5),ncol=6,byrow=TRUE)
matrix(rep(1:5,each=5),ncol=6,byrow=TRUE)
matrix(rep(1:5,each=6),ncol=6,byrow=TRUE)
x=['a','b','c','d']
matrix(rep(x,each=6),ncol=6,byrow=TRUE)
x=1:10:-1
matrix(rep(x,each=6),ncol=6,byrow=TRUE)
x=1:-1
matrix(rep(x,each=6),ncol=6,byrow=TRUE)
x=1:-1
matrix(rep(x,each=6),ncol=6,byrow=TRUE)
c(1:10)
r(1:10)
t(c(1:10))
matrix(rep(x,each=6),ncol=6,byrow=TRUE)
t(c(1:10))
matrix(rep(a,each=6),ncol=6)
a=t(c(1:10))
matrix(rep(a,each=6),ncol=6)
a=(c(1:10))
matrix(rep(a,each=6),ncol=6)
a=t(c(1:10))
matrix(rep(a,each=6),ncol=6)
a=t(c(1:10))
matrix(rep(a,each=6),nrow=6)
a=(c(1:10))
matrix(rep(a,each=6),nrow=6)
a<-t(c(1:10))
b<-matrix(rep(a,each=6),ncol=6,)
b
a<-t(c(1:10))
b<-matrix(rep(a,each=6),nrow=6)
b
2^b
2.^b
a=matrix(c(1:2:30),nrow=5,ncol=4)
a=matrix(c(1:2:30),nrow=5,ncol=6)
a=matrix(c(1:30),nrow=5,ncol=6)
a
a<-t(c(1:10))
b<-matrix(rep(a,each=6),nrow=6)
b
a=matrix(c(1:30),nrow=5,ncol=6)
a=matrix(c(1:30),nrow=5,ncol=6)
b=apply(a,2,rev)
a=matrix(c(1:30),nrow=5,ncol=6)
b=apply(a,2,rev)
b
a=matrix(c(1:30),nrow=5,ncol=6)
a
b=apply(a,2,rev)
b
a=matrix(c(1:30),nrow=5,ncol=6)
a
b=apply(a,1,rev)
b
a=matrix(c(1:30),nrow=5,ncol=6)
a
c=upper.tri(a,diag=TRUE)
c
a=matrix(c(1:30),nrow=5,ncol=6)
a
c=upper.tri(a)
c
a=matrix(c(1:30),nrow=5,ncol=6)
a
c=upper.tri(a,diag=TRUE)
c
a=matrix(c(1:30),nrow=5,ncol=6)
a
c=upper.tri(a,diag=TRUE)
c
c
a=matrix(c(1:30),nrow=5,ncol=6)
a
c=a[upper.tri(a,diag=TRUE)]
c
(m2 <- matrix(1:20, 4, 5))
lower.tri(m2)
m2[lower.tri(m2)] <- NA
m2
lower.tri(a)
a[lower.tri(a)] <- 0
a
a=matrix(c(1:30),nrow=5,ncol=6)
a
c=upper.tri(a,diag=TRUE)
c
b=apply(a,1,rev)
b
b[,2]=[1,1,1,1,1,1]
b[,2]=t([1,1,1,1,1,1])
a<-matrix(c(1:30),nrow=5,ncol=6)
a<-matrix(c(1:30),nrow=5,ncol=6)
a<-matrix(c(1:30),nrow=5,ncol=6)
a<-matrix(c(1:30),nrow=5,ncol=6)
a
c<-upper.tri(a,diag=TRUE)
c
b<-apply(a,1,rev)
b
b[,2]<-t([1,1,1,1,1,1])
b[,2]<-1
b
b[,2]<-c(1,2,3,4)
a<-matrix(c(1:30),nrow=5,ncol=6)
a
c<-upper.tri(a,diag=TRUE)
c
b<-apply(a,1,rev)
b
b[,2]<-c(1,2,3,4,5,6)
b
a<-matrix(c(1:30),nrow=5,ncol=6)
a
c<-upper.tri(a,diag=TRUE)
c
b<-apply(a,1,rev)
b
b[,2]<-c(1,2,3,4,5,6)
b
b[1,1]
a<-matrix(c(1:30),nrow=5,ncol=6)
a
c<-upper.tri(a,diag=TRUE)
c
b<-apply(a,1,rev)
b
b[,2]<-c(1,2,3,4,5,6)
b
a<-matrix(c(1:30),nrow=5,ncol=6)
a
c<-upper.tri(a,diag=TRUE)
c
b<-apply(a,1,rev)
b
b[,2]<-c(1,2,3,4,5,6)
b
max(b-10,0)
a<-matrix(c(1:30),nrow=5,ncol=6)
a
c<-upper.tri(a,diag=TRUE)
c
b<-apply(a,1,rev)
b
b[,2]<-c(1,2,3,4,5,6)
b
2-b
for(i in seq(5,-5,by=-0.2)){
i
}
seq(5,-5,by=-0.2)
a=seq(5,-5,by=-0.2)
for(i in a)){
i
}
for(i in a)){
print(i)
}
for(i in a))
print(i)
for(i in a)) {
i
}
for(i in c(1,2,3))) {
i
}
for(i in c(1,2,3))) {
i
}
for(n in c(1,2,3))) {
n
}
for(n in c(1,2,3)) {
n
}
for(n in c(1,2,3)) {
n
}
for(n in c(1,2,3)) {
print(n)
}
for(n in a) {
print(n)
}
for(n in seq(5,-5,by=-0.2)) {
print(n)
}
k=1:n
k<-1:n
k
a<-matrix(c(1:30),nrow=5,ncol=6)
a
c<-upper.tri(a,diag=TRUE)
c
b<-apply(a,1,rev)
b
b[,2]<-c(1,2,3,4,5,6)
b
b[1:3,3]
c(1:3,2:4)
c(1:3;2:4)
c(t(1:3),t(2:4))
rep(0,5)
a<-matrix(c(1:30),nrow=5,ncol=6)
a*2
#' Estimates VaR of American vanilla put using binomial tree.
#' @param stockPrice The stock price of underlying stock.
#' @param strike The strike price of the option.
#' @param r The risk-free rate.
#' @param maturity The time to maturity of the option in days.
#' @param numberSteps The number of time-steps considered for
#' the binomial model.
#' @return
#' @references Dowd, Kevin.
#' @author Dinesh Acharya
AmericanPutVarBinomial <- function(amountInvested, stockPrice, strike, r,
volatility, maturity, numberSteps, cl, hp){
s <- stockPrice
x <- strike
t <- maturity
sigma <- volatility
# convert maturity and holding period unit from days to years
t <- t/360
hp <- hp/360
# calculate the length of each interval, dt, and number of steps to end of
# holding period
n <- numberSteps
dt <- t/n
m <- round(hp/dt) # number of steps to end of holding period
#
# calculate movements and associated probabilities
#
u <- exp(sigma*sqrt(dt))
d <- 1/u
a <- exp(r*dt)
p <- (a-d)/(u-
jspan <- N*.5
jspan <- (jspan>=0)*floor(jspan)+(jspan<0)*ceiling(jspan) # j-th node
# offset number
ispan <- round(t/dt)%%2 # i-th node offset number
i <- ispan:(n+ispan) # i-th node numbers
j <- t(jspan:(n+jspan)) # j-th node numbers
# expand i and j to eliminate for loop
jex <- matrix(rep(j,each=(length(i))^2), ncol=(length(i))^2, byrow=TRUE)
iex <- matrix(rep(i,each=(length(j))^2),nrow=(length(i))^2)
#
# asset price at nodes, matrix is flipped so tree appears correct visually
pr <- apply(apply(s*(u^jex)*(d^(iex-jex)),1,rev),2,rev)
# get upper triangle of pr
lower.tri(pr)
pr[lower.tri(pr)] <- 0
#
# option valuation along tree
opt <- matrix(0,nrow(pr),ncol(pr))
opt[,n+1] <- pmax(x-pr[,n+1],0) # determine final option value  from underlying price
for(l in seq(n,1,by=-1)){
k=1:l
# probable option values discounted back one time step
discopt=(p*opt[k,l+1]+(1-p)*opt[k+1,l+1])*exp(-r*dt)
# option value is max of X - current price or discopt
opt[,l]=c(pmax(x-pr[1:l,l],discopt),rep(0,n+1-l))
}
# initial option price and number of options in portfolio
initialOptionPrice <- opt(1,1)
numberOptions <- amountInvested/initialOptionPrice
# option tree values at end of holding period
endHpOptionPrice <- opt[,m+1]
endHpOptionPrice <- endHpOptionPrice[1:M+1]
# option position Profit and Loss
profitOrLoss <- (endHpOptionPrice-initialOptionPrice)*numberOptions
#compute VaR
valueAtRisk <- VaR(profitOrLoss,cl)
return (valueAtRisk)
}
a<-AmericanPutVarBinomial(500,20,5,5,0.05,0.2,10,20,0.2,90)
a
#' Estimates VaR of American vanilla put using binomial tree.
#' @param stockPrice The stock price of underlying stock.
#' @param strike The strike price of the option.
#' @param r The risk-free rate.
#' @param maturity The time to maturity of the option in days.
#' @param numberSteps The number of time-steps considered for
#' the binomial model.
#' @return
#' @references Dowd, Kevin.
#' @author Dinesh Acharya
AmericanPutVarBinomial <- function(amountInvested, stockPrice, strike, r,
volatility, maturity, numberSteps, cl, hp){
s <- stockPrice
x <- strike
t <- maturity
sigma <- volatility
# convert maturity and holding period unit from days to years
t <- t/360
hp <- hp/360
# calculate the length of each interval, dt, and number of steps to end of
# holding period
n <- numberSteps
dt <- t/n
m <- round(hp/dt) # number of steps to end of holding period
#
# calculate movements and associated probabilities
#
u <- exp(sigma*sqrt(dt))
d <- 1/u
a <- exp(r*dt)
p <- (a-d)/(u-
jspan <- N*.5
jspan <- (jspan>=0)*floor(jspan)+(jspan<0)*ceiling(jspan) # j-th node
# offset number
ispan <- round(t/dt)%%2 # i-th node offset number
i <- ispan:(n+ispan) # i-th node numbers
j <- t(jspan:(n+jspan)) # j-th node numbers
# expand i and j to eliminate for loop
jex <- matrix(rep(j,each=(length(i))^2), ncol=(length(i))^2, byrow=TRUE)
iex <- matrix(rep(i,each=(length(j))^2),nrow=(length(i))^2)
#
# asset price at nodes, matrix is flipped so tree appears correct visually
pr <- apply(apply(s*(u^jex)*(d^(iex-jex)),1,rev),2,rev)
# get upper triangle of pr
lower.tri(pr)
pr[lower.tri(pr)] <- 0
#
# option valuation along tree
opt <- matrix(0,nrow(pr),ncol(pr))
opt[,n+1] <- pmax(x-pr[,n+1],0) # determine final option value  from underlying price
for(l in seq(n,1,by=-1)){
k=1:l
# probable option values discounted back one time step
discopt=(p*opt[k,l+1]+(1-p)*opt[k+1,l+1])*exp(-r*dt)
# option value is max of X - current price or discopt
opt[,l]=c(pmax(x-pr[1:l,l],discopt),rep(0,n+1-l))
}
# initial option price and number of options in portfolio
initialOptionPrice <- opt(1,1)
numberOptions <- amountInvested/initialOptionPrice
# option tree values at end of holding period
endHpOptionPrice <- opt[,m+1]
endHpOptionPrice <- endHpOptionPrice[1:M+1]
# option position Profit and Loss
profitOrLoss <- (endHpOptionPrice-initialOptionPrice)*numberOptions
#compute VaR
valueAtRisk <- VaR(profitOrLoss,cl)
return (valueAtRisk)
}
a <- AmericanPutVarBinomial(500,20,5,0.05,0.2,10,20,0.2,90)
a
package(PerformanceAnalytics)
library(PerformanceAnalytics)
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
R.Version()
library(AmericanPutVar)
AmericanPutVarBinomial(0.20, 27.2, 25, .16, .05, 60, 20, .95, 30)
AmericanPutVarBinomial(0.20,27.2,25,.16,.05,60,20,.95,30)
AmericanPutVar::AmericanPutVarBinomial(0.20,27.2,25,.16,.05,60,20,.95,30)
AmericanPutVar
getwd()
setwd("C:\Users\Dinesh Acharya\Desktop\GSoC\RSample")
setwd("C:\users\Dinesh Acharya\Desktop\GSoC\RSample")
setwd('C:\Users\Dinesh Acharya\Desktop\GSoC\RSample')
setwd("C:\Users\Dinesh Acharya\Desktop\GSoC\RSample")
setwd("C:\\Users\\Dinesh Acharya\\Desktop\\GSoC\\RSample")
getwd()
library(roxygen2)
package.skeleton('AmericanPutVar',code_files='AmericanPutVarBinomial.R',force=TRUE)
setwd("C:\\Users\\Dinesh Acharya\\Desktop\\GSoC\\RSample\\AmericanPutVar")
reoxygenise()
roxygenise()
library(AmericanPutVar)
AmericanPutVar::AmericanPutVarBinomial(0.2,27.2,25,.16,.05,60,20,.95,30)
AmericanPutVarBinomial(0.2,27.2,25,.16,.05,60,20,.95,30)
